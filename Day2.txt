https://www.devopsschool.com/tutorial/docker/commands/index.html
13.233.86.246

https://www.devopsschool.com/tutorial/docker/commands/index.html

CP

 191  touch devopsschool.txt
  192  ls
  193  docker ps
  194  docker run -itd ubuntu /bin/bash
  195  docker ps
  196  ls
  197  docker exec 323ada7ba91f ls /opt
  198  docker cp devopsschool.txt 323ada7ba91f:/opt
  199  docker exec 323ada7ba91f ls /opt
  200  ls
  201  clear
  202  ls
  203  rm -rf devopsschool.txt
  204  ls
  205  docker cp 323ada7ba91f:/opt/devopsschool.txt .
  206  ls

diff
	Once a container get created - after that any files/dir
	- ADDED
	- CHANGED
	- DELETED...
	you get info using this command.

 208  clear
  209  docker ps
  210  docker attach 323ada7ba91f
  211  docker ps
  212  clear
  213  docker ps -a
  214  docker diff 323ada7ba91f
  215  docker start 323ada7ba91f
  216  docker diff 323ada7ba91f
  217  history

================================
What kind of AUTH we have to access a DOCKER Container.
================================
DOCKER NEEDs ROOT to run docker commands.
ROOT can access every thing menas every user.
COntainer is a process for the HOST machine
- 
Do a root need access to a process(user) to get inside?
===================================================
port

  234  docker ps
  235  ps -eaf | grep docker
  236  clear
  237  docker run -d -p 8080:8080 jenkins
  238  docker ps
  239  docker port 53bdbb763fad
  240  docker port 8b2a948a9c91


rename

 243  docker ps
  244  docker run -itd --name dev1 ubuntu
  245  docker ps
  246  docker help run
  247  clear
  248  ls
  249  docker ps
  250  docker rename 323ada7ba91f dev2
  251  docker rename affectionate_galileo dev3
  252  docker ps
  253  docker start dev1 dev2 dev3
  254  docker ps
  255  docker stop dev1 dev2 dev3
  256  docker ps
  257  docker start dev1 dev2 dev3
  258  docker ps
  259  history


Assignment
=============================
update	Update configuration of one or more containers
wait	Block until one or more containers stop, then print their exit codes
=============================

logs

	Fetch the logs of a container AKA LOGS of PID1

 189  docker ps
  190  docker logs ff7f0543fd00
  191  watch docker logs ff7f0543fd00
  192  docker logs ff7f0543fd00
  193  docker los
  194  docker logs
  195  docker ps
  196  docker logs 8b2a948a9c91
  197  docker logs 8b2a948a9c91
  198  watch docker logs 8b2a948a9c91
  199  history


stats
 201  docker stats
  202  docker stats ff7f0543fd00
  203  docker ps
  204  docker stats
  205  docker ps
  206  docker pause 53bdbb763fad
  207  docker ps
  208  clear
  209  docker pause 53bdbb763fad
  210  docker stats
  211  history



top
212  clear
  213  docker ps
  214* ps -eaf | grep docke
  215  clear
  216  docker ps
  217  ps -eaf | grep /bin/tini
  218  ps -eaf | grep /bin/bash
  219  docker top ff7f0543fd00


events

 221  clear
  222  docker events
  223  docker events
  224  hisory
  225  history


====================================================
Docker Volume
============================================
Containers are EMP*
-----------------------
Data in the Container are also EMP*
------------------------------
BUT we need DATA persistency....BEYOND Containers Lifecycle.

https://www.devopsschool.com/blog/understand-docker-volume-from-beginner-to-deep-dive-level/

Volume - Types
- volume	/var/lib/docker/volumes 
- mntfs		ANY PLACE IN THE HOST MACHINE
- tempfs	Memory


 232  ls
  233  docker volume
  234  clear
  235  ls
  236  docker volume ls
  237  docker volume prune
  238  clear
  239  ls
  240  docker volume ls
  241  docker volume create dev1
  242  ls
  243  docker volume create dev2
  244  ls
  245  docker volume create dev3
  246  docker volume rm dev3
  247  ls
  248  docker volume inspect dev3
  249  docker volume inspect dev2
  250  docker volume
  251  ls
  252  docker run -itd -v dev1:/tmp ubuntu
  253  docker ps
  254  clear
  255  docker ps
  256  docker exec 55f7d4335d83 df -kh
  257  docker run -itd -v dev1:/tmp/raju ubuntu
  258  docker p
  259  docker ps
  260  clear
  261  docker ps
  262  docker exec d4dd948bb00a df -kh
  263  docker exec d4dd948bb00a touch //tmp/raju/kaka.txt
  264  docker ps
  265  docker exec d4dd948bb00a ls /tmp
  266  docker exec d4dd948bb00a ls /tmp/raju
  267  docker exec 55f7d4335d83 /tmp
  268  docker exec 55f7d4335d83 ls /tmp
  269  ls
  270  cd dev1
  271  ls
  272  cd _data/
  273  ls
  274  touch fdsfsf
  275  ls
  276  docker exec 55f7d4335d83 ls /tmp
  277  cd ..
  278  ls
  279  clear
  280  cd ..
  281  ls
  282  docker ps -a
  283  docker stop d4dd948bb00a 55f7d4335d83
  284  docker rm d4dd948bb00a 55f7d4335d83
  285  ls
  286  cd dev1/
  287  ls
  288  cd _data/
  289  ls
  290  docker run -itd -v dev1:/opt/raju1 -v dev2:/opt/raju2 ubuntu
  291  docker ps
  292  docker exec 2dee3c3a993e ls /
  293  docker exec 2dee3c3a993e ls /opt
  294  docker exec 2dee3c3a993e ls /opt/raju1
  295  clear
  296  ls
  297  cd ..
  298  clear
  299  ls
  300  cd ..
  301  ls
  302  cd ..
  303  ls
  304  pwd
  305  cd /opt/
  306  ls
  307  pwd
  308  mkdkir backup
  309  mkdir backup
  310  ls
  311  cd backup/
  312  clear
  313  pwd
  314  docke run -itd -v /opt/backup:/opt/ramu ubuntu
  315  docker run -itd -v /opt/backup:/opt/ramu ubuntu
  316  docker ps
  317  docker exec e653f5587a0c /opt
  318  docker exec e653f5587a0c ls /opt
  319  touch sdffs
  320  docker exec e653f5587a0c ls /opt/ramu
===========================================================

13.233.190.64


  438  docker ps -a
  439  docker rm e653f5587a0c  2dee3c3a993e
  440  clear
  441  docker ps -a
  442  docker images
  443  docker rmi ubuntu jenkins
  444  docker images
  445  clear
  446  docker info
  447  cd /var/lib/docker
  448  ls
  449  docker info
  450  ls
  451  cd overlay2
  452  ls
  453  du -sh
  454  cd ..
  455  ls
  456  cd image/
  457  ls
  458  du -sh .
  459  cd ..
  460  clear
  461  ls
  462  docker pull ubuntu
  463  ls
  464  cd overlay2/
  465  clear
  466  ls
  467  du -sh .
  468  cd ..
  469  ls
  470  clear
  471  ls
  472  cd image/
  473  ls
  474  du -sh .
  475  cd overlay2/
  476  cleare
  477  clear
  478  ls
  479  pwd
  480  cd ..
  481  ls
  482  clear
  483  ls
  484  cd ..
  485  ls
  486  cd overlay2/
  487  clear
  488  ls
  489  docker inspect ubuntu
  490  ls
  491  clear
  492  ls
  493  du -h --max-depth=1
  494  cd ./e9e585ff90cfdf18cffee8598ec1c4da4a0e270d18ec9458b6fd250615e03d20
  495  ls
  496  clear
  497  ls
  498  cd diff/
  499  ls
  500  cd ..
  501  ls
  502  cd ..
  503  ls
  504  clear
  505  ls
  506  docker history ubuntu
  507  ls
  508  clear
  509  pwd
  510  docker run -itd ubuntu
  511  ls
  512  du -sh c3c3a7a4cbf9b400fd3b75af04f39df385081bb3a5b69a3636bf0ce98db0f8bb
  513  du -sh c3c3a7a4cbf9b400fd3b75af04f39df385081bb3a5b69a3636bf0ce98db0f8bb-init
  514  clear
  515  ls
  516  df -kh
  517  cd /var/lib/docker/overlay2/c3c3a7a4cbf9b400fd3b75af04f39df385081bb3a5b69a3636bf0ce98db0f8bb/merged
  518  ls
  519  cd ..
  520  clear
  521  ls
  522  pwd
  523  ls
  524  df -kh
  525  docker ps
  526  clear
  527  docker ps
  528  docker exec ed3a6e82cfff touch /opt/rajesh.txt
  529  pwd
  530  find . -name rajesh.txt
  531  ls
  532  docker ps
  533  docker stop ed3a6e82cfff
  534  df -kh
  535  find . -name rajesh.txt
  536  docker start ed3a6e82cfff
  537  df -kh
  538  find . -name rajesh.txt
  539  history
==========================================================

How to create an Docker Image?
==================================
Method 1 - Using Existing Container - Manual way

ROOTFS - UBUNTU
 445  docker run -itd ubuntu
  446  docker ps
  447  docker attach c6d0e13ea96e


App - git - java - apache
----------Inside a container ---------------
root@c6d0e13ea96e:/# history
    1  clear
    2  apt-get install git
    3  apt-get update
    4  apt-get install git
    5  git
    6  apt-get install openjdk-8-jre
    7  java
    8  which apache2
    9  apt-get install apache2 -y
   10  which apache2
   11  git
   12  java
   13  which apache2
   14  history

450  docker ps
  451  git
  452  docker exec c6d0e13ea96e git
  453  history
  454  clear
  455  docker ps -a
  456  docker diff c6d0e13ea96e
  457  clear
  458  ls
  459  docker ps
  460  docker history ubuntu
  461  docker commit -m"ub-up-git-ap-java" -a"Rajesh kumar" c6d0e13ea96e ub-up-git-ap-java
  462  docker history ubuntu
  463  docker images
  464  docker history ubuntu
  465  docker history ub-up-git-ap-java
  466  docker ps -a
  467  docker stop c6d0e13ea96e
  468  docker rm c6d0e13ea96e
  469  clear
  470  docker images
  471  docker run -itd --name ub1 ubuntu
  472  docker ps
  473  docker run -itd --name uball ub-up-git-ap-java
  474  docker ps
  475  clear
  476  ls
  477  docker ps
  478  docker exec f61976e7bfe5 git
  479  docker ps
  480  clear
  481  docker ps
  482  docker exec 14a2eb3f2360 git
  483  history
============================================================
How to share an Images?
==================
1. Using Tar ball

 439  docker images
  440  cd
  441  ls
  442  pwd
  443  ls
  444  docker save -o ub-up-git-ap-java.tar ub-up-git-ap-java
  445  ls
  446  docker ps -a
  447  docker stop f61976e7bfe5  14a2eb3f2360
  448  docker rm f61976e7bfe5  14a2eb3f2360
  449  clear
  450  ls
  451  docker images
  452  docker rmi ub-up-git-ap-java
  453  docker images
  454  ls
  455  docker load -i ub-up-git-ap-java.tar
  456  docker images
  457  docker run -itd ub-up-git-ap-java
  458  docker ps
  459  clear
  460  docker ps


2. Using hub.docker.com registry

Step 1	- Register at hub.docker.com
Step 2  - Verify your account
Step 3  - Create a public repo at hub.docker.com
Step 4  - Make sure that your LOCAL Image repo name MUST Match with repo name of hub.docker.com
Step 5  - Docker login
Step 6 - docker push reponame

 439  docker images
  440  docker tag ub-up-git-ap-java devopsschools/dev23
  441  docker images
  442  docker login
  443  clear
  444  docker images
  445  docker push devopsschools/dev23
  446  history
  447  docker tag ub-up-git-ap-java devopsschools/dev23:v2
  448  docker push devopsschools/dev23:v2


3. Using Artifactory 

Method 2 - Using Dockerfile - Automated CI way
-======================================================
What is Dockerfile?
	- a file
		contains
		-------
		LINES OF Instructions which shall be done for EACH Layer.

	- Each line of a dockerfile is ONE Layer

FROM ubuntu
MAINTAINER Rajesh Kumar devops@Rajeshkumar.xyz
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update 
RUN apt-get -y install tzdata
RUN apt-get install git -y 
RUN apt-get install apache2 -y
RUN apt-get install openjdk-8-jre -y

docker build -t raju .

	- A LAYER or LINE Changes is been done in the CONTAINER OF Previous LINE Container.

FROM ubuntu
MAINTAINER Rajesh Kumar devops@Rajeshkumar.xyz
RUN touch /opt/raju2.txt
RUN touch /opt/raju22.txt
RUN touch /opt/raju222.txt

docker build -d filename -t raju1 .



FROM ubuntu
MAINTAINER Rajesh Kumar devops@Rajeshkumar.xyz
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update 
RUN apt-get -y install tzdata
RUN apt-get install git -y 
RUN apt-get install apache2 -y
RUN apt-get install openjdk-8-jre -y
ENV JAVA_HOME=/opt/java
COPY index.html /opt
VOLUME /tmp/ramukaka

 592  clear
  593  docker build -t doc3 -f doc3 .
  594  clear
  595  docker images
  596  docker run -itd doc3
  597  docker ps
  598  docker exec 80ac34b29864 git
  599  clear
  600  docker exec 80ac34b29864 which apache2
  601  docker exec 80ac34b29864 java
  602  java
  603  clear
  604  docker exec 80ac34b29864 java
  605  clear
  606  docker exec 80ac34b29864 env
  607  docker exec 80ac34b29864 ls /opt
  608  docker exec 80ac34b29864 df -kh

https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html


