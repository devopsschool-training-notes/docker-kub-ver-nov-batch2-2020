Rajesh Kumar
==================
Docker - 2 days
K8s - 3 Days
==================
Lab - 
VMs - Mr Shiva - 81062 70903
Citrix - Ali.
----------------------------
Demo - EC2 instance
==================================
2 BREAK - 20 mins.
		11:00 AM
		4:00 PM
1 Lunch BREAK 
	- 1 PM IST - 2 PM IST
=====================================
8105843520 | rajesh@devopsschool.com
=====================================
Pre Test	 - 30 Mins - Today
Post Test	 - 30 mins - Last day - Last hour	
==========================================================
https://www.devopsschool.com/lms

Docker Essential Quiz - 1		15 mins
https://www.devopsschool.com/lms/mod/quiz/view.php?id=250

Kubernetes Essential Quiz - 1		15 mins
https://www.devopsschool.com/lms/mod/quiz/view.php?id=319

=========================================================================
=========================================================================
Docker 
K8s
=====================
www.DevOpsSchool.com
=====================
What is Docker?
---------------------
	Container mgmt tool.
	From Soloman Hykes
	Written in Golang
	Release
		CE - Part of the session	- OPEN SOURCE
		EE -
	https://www.devopsschool.com/blog/difference-between-docker-community-edition-ce-vs-docker-enterprise-edition-ee-in-2020/
	https://www.devopsschool.com/blog/what-is-docker-enterprise-3-0-detailed-exaplanations/ 
	LAtest version 19.X

	Tool
	- Save Cost
	- Save Time
	- Improve Quality
	-----------------------------
	- To run APPs.
		in the CONTAINER.

What is Container?
---------------------
	- Lightweight APP Runtime independent env

	- Its just a init of 
			USER NS
			& 
			Each user get their own
					- NET NS
					- MNT NS
					- PID NS

How can we run APPS?
What are the components we need to have to run APPS or Software?
Pre-req for running software?
--------------------------------------------------------

HARDWARE
 OS
   Kernal (TYPES)				----------------OS------------------------
	Namespace				ALLOWD		NEED		CAN GET IT
	 - USER NS -> Init USER AREA		MANY		1		MANY			
	 - MNT NS -> Init mount fs		ONE		1		MANY
 	 - PID NS -> init process table		ONE		1		MANY
	 - NET NS -> Init network		ONE		1		MANY

	 - CGROUPS - Allocating CPU and RAM
	 - CAPABILITIES - ROOT or NOT ROOT
----------------------------------------------------------------------------------------------
History of Computing
=============================================================================================
1990s					2000					NOW
----------------------------- Where we r runnung apps ---------------------------------------
PHYSICAL Server			Virtualization					Containers
		 INTERNET				Internet is cons* us
	


KERNAL
The kernel is a computer program at the core of a computer's operating system with complete control over everything in the system. 
====================================================
Other tools?
-------------
https://www.devopsschool.com/blog/list-of-top-container-runtime-interface-projects/

How Docker Works? Docker Architecture
=====================================
Human -> Docker Client ----REST---> Docker Deamon(Server) -> ContainerD -> Kernal
	==================================================
				Docker Engine

ContainerD

Components of Docker?
=======================
1. Docker Engine
2. Docker Image

What is OS Image?
-----------------
	Consist of FILE SYSTEM(S)			e.g
	Type		
		BOOT FILE SYSTEM - Kernal		LINUX
		+
		ROOT FILE SYSTEM			ubuntu
		+ 
		USER FILE SYSTEM			root
		+ 
		APP FILE SYSTEM				ls

What is Docker Image?
	Consist of FILE SYSTEM(S)
	Type
		ROOT FILE SYSTEM			ubuntu or centos		
		+ 
		USER FILE SYSTEM			apache or tomcat
		+ 
		APP FILE SYSTEM				apache or tomcat

	ONE COPY OF Image get MOUNTED to each USER == ONE CONTAINER
	Whatever you have in image = u see inside a container.

3. Docker Registry
	  contains Repos
		   Contains
			FILE SYSTEM(S) of Image
	PUB
		hub.docker.com
		Google Registry
	PVT
		Artifactory
		Nexus
4. Docker Container

	When we run image
			ONE USER GET CREATED using USER NS
			and get mounted from ONE COPY Of Image
			and get PID from PID NS
			and get network from NET NS



Docker workflow
===============================================
Humna -> RUN IMAGE using DOcker Client --> Docker Deamon
				CHECK - DO I HAVE THAT IMAGE???
				- NO 	--- DOWNLOAD FROM HUB.DOCKER.COM TO LOCAL Registry
					--- Create a container
				- YES
					--- Create a container

Vms LifeCYCLE
================================
create -> start -> stop -> start -> pause -> unpause -> kill -> remove
		  ===============
			restart -> pause -> unpause 

Container LifeCYCLE
================================
create -> start -> stop -> start -> pause -> unpause -> kill -> remove
		  ===============
			restart -> pause -> unpause 

How to install Docker?
================================
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-rhel.html
13.232.166.0


 1  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    2  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    3  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    4  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    5  sudo yum install -y docker-ce
    6  docker -v
    7  sudo systemctl enable docker
    8  sudo systemctl start docker
    9  docker info
   10  clear
   11  which docker
   12  ps -eaf | grep docker
   13  which containerd
   14  history

========================================================================
========================================================================

Container LifeCYCLE
================================
create -> start -> stop -> start -> pause -> unpause -> kill -> remove
		  ===============
			restart -> pause -> unpause 



Which APPs which i want to run inside a containers?
===========================

ubuntu
centos
fedora
jenkins
	rootfs + users + jdk + jenkins
		 jenkins
jira
sonarqube
-----------------------------------------
	You need image.

 16  docker info
   17  clear
   18  docker images
   19  docker images
   20  docker pull jenkins
   21  clear
   22  docker images
   23  docker ps
   24  docker ps -a
   25  cleae
   26  clear
   27  docker create jenkins
   28  docker images
   29  docker ps
   30  docker ps -a
   31  docker create jenkins
   32  docker ps -a
   33  clear
   34  docker ps -a
   35  docker start 46c57a65d191
   36  docker ps -a
   37  docker stop 6fd77d63d62a
   38  docker ps -a
   39  docker stop 46c57a65d191
   40  docker ps -a
   41  xlear
   42  clear
   43  docker ps -a
   44  docker start 46c57a65d191
   45  docker ps -a
   46  clear
   47  docker pause 46c57a65d191
   48  docker ps -a
   49  docker unpause 46c57a65d191
   50  docker ps -a
   51  docker kill 46c57a65d191
   52  docker ps -a
   53  clear
   54  docker ps -a
   55  docker rm 46c57a65d191 6fd77d63d62a
   56  docker ps -a
   57  history

Assignment
------------------------
Diff Between STOP Vs KILL
Diff Between Pause Vs unPause 

 57  history
   58  clear
   59  docker help
   60  docker help pause
   61  docker help unpause
   62  docker help stop
   63  docker help kill
   64  history

==================================================================
==================================================================
How to use Container???
==================================================================
==================================================================

What is Container?

	When we run image
			ONE USER GET CREATED using USER NS
			and get mounted from ONE COPY Of Image
			and get PID from PID NS
			and get network from NET NS
 65  clear
   66  id
   67  ps
   68  ps -eaf | grep 8564
   69  ps -eaf | grep 8562
   70  ps -eaf | grep 7406
   71  ps -eaf | grep 7405
   72  ps -eaf | grep 5304
   73  ps -eaf | grep 1207
   74  ps -eaf
   75  clear
   76  ps
   77  ps -eaf | grep docker
   78  docker create jenkins
   79  ps -eaf | grep docker
   80  docker start 8b2a948a9c91cfb4994ab305658305586d70531f69648d7eff1c32763eaa572c
   81  ps -eaf | grep docker
   82  ps -eaf | grep 19020
   83  ps -eaf | grep 8901
   84  clear

 85  df -kh
   86  ps -eaf
   87  clea
   88  ip a
   89  clear
   90  ls
   91  clear
   92  docker ps
   93  docker create jenkins
   94  docker ps -a
   95  docker start 17960f90fc5d
   96  clear
   97  docker ps -a
   98  docker exec 17960f90fc5d df -kh
   99  docker exec 8b2a948a9c91 df -kh
  100  clear
  101  ls
  102  history
  103  docker exec 17960f90fc5d ls /tmp
  104  docker exec 8b2a948a9c91 ls /tmp
  105  docker exec 8b2a948a9c91 touch /tmp/rajesh.txt
  106  docker exec 8b2a948a9c91 ls /tmp
  107  docker exec 17960f90fc5dls /tmp
  108  docker exec 17960f90fc5d ls /tmp
  109  clear
  110  ps -eaf
  111  clear
  112  docker ps
  113  docker exec 17960f90fc5d ps -eaf
  114  docker exec 8b2a948a9c91 ps -eaf
  115  clear
  116  docker ps
  117  docker inspect 17960f90fc5d | grep -i ip
  118  docker inspect 8b2a948a9c91 | grep -i ip
  119  history


Importance of PID1?
=============================================================================================
Physical Server 		Virtual Server			Container
is running			is running			is running
coz of 				coz of				coz of 
PID 1				PID 1				PID 1
is running			is running			is running	
---------------------
PID1 is SYSTEMD			PID1 is SYSTEMD			PID1 is ANYTHING
								- e.g
								/bin/bash
								ls
								java
								python
								ruby
								abc

Means 
PID 1 of the container get exited - container gets exited as well .

===================================================================
RUN
-----------------
create + start + BECOME a container or ATTACHED to container PID1

RUN -d
-----------------
create + start + DO NOT BECOME a container or DO NOT ATTACHED to container PID1

 120  clear
  121  ps -eaf
  122  clear
  123  docker ps
  124  ps
  125  clear
  126  docker run jenkins
  127  docker ps -a
  128  clear
  129  docker run ubuntu
  130  docker ps -a
  131  ls
  132  dir
  133  bash

  1  clear
    2  docker run -d jenkins
    3  docker ps
    4  docker run -d jenkins
    5  docker ps
    6  docker run -d ubuntu
    7  docker ps

============================================================
GO INSIDE OF CONTAINER
----------------------------
exec
	THIS WOULD Execute an Executable INSIDE a container
	with -it and /bash/bash - You can go inside a container.

How to come out of the container without exiting?
- cntr + p +q 

 135  clear
  136  docker ps
  137  docker exec 716b712593bf ls
  138  clear
  139  docker exec 716b712593bf df -kh
  140  docker exec 716b712593bf git
  141  clear
  142  docker exec 716b712593bf ntp
  143  docker exec 716b712593bf dfasas
  144  gfdfgd
  145  ls
  146  clear
  147  ls
  148  docker ps
  149  docker exec 716b712593bf /bin/bash
  150  docker exec -it 716b712593bf /bin/bash
  151  docker ps
  152  clear
  153  docker run -it ubuntu /bin/bash
  154  docker run -it ubuntu /bin/bash
  155  docker ps
  156  history


attach
	This get attached to the PID1 of the running container.

 161  docker attach 716b712593bf	# jenkins
  162  clear
  163  docker ps
  164  docker attach d9f4869a6dc8	# ubuntu
  165  docker ps -a


ACCESS FROM OUTSIDE using network
 171  docker ps
  172  docker inspect b0cc06d655d3 | grep i- ip
  173  docker inspect b0cc06d655d3 | grep -i ip
  174  clear
  175  ping 172.17.0.4
  176  curl http://172.17.0.4:8080


	
